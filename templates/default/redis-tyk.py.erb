# (C) Datadog, Inc. 2010-2016
# All rights reserved
# Licensed under Simplified BSD License (see LICENSE)

'''
Redis checks
'''
# stdlib
from collections import defaultdict
import re
import time

# 3rd party
import redis

# project
from checks import AgentCheck

class Redis(AgentCheck):
    SOURCE_TYPE_NAME = 'redis-tyk'

    def __init__(self, name, init_config, agentConfig, instances=None):
        AgentCheck.__init__(self, name, init_config, agentConfig, instances)
        self.connections = {}
        self.last_timestamp_seen = defaultdict(int)


    def _generate_instance_key(self, instance):
        if 'unix_socket_path' in instance:
            return (instance.get('unix_socket_path'), instance.get('db'))
        else:
            return (instance.get('host'), instance.get('port'), instance.get('db'))


    def _get_conn(self, instance):
        key = self._generate_instance_key(instance)
        if key not in self.connections:
            try:

                # Only send useful parameters to the redis client constructor
                list_params = ['host', 'port', 'db', 'password', 'socket_timeout',
                               'connection_pool', 'charset', 'errors', 'unix_socket_path']

                # Set a default timeout (in seconds) if no timeout is specified in the instance config
                instance['socket_timeout'] = instance.get('socket_timeout', 5)

                connection_params = dict((k, instance[k]) for k in list_params if k in instance)

                self.connections[key] = redis.Redis(**connection_params)

            except TypeError:
                raise Exception("You need a redis library that supports authenticated connections. Try sudo easy_install redis.")

        return self.connections[key]


    def _get_api_keys(self, instance):
        conn = self._get_conn(instance)

        apikeys = conn.keys('apikey-*')
        self.gauge('redis-tyk.apikeys', len(apikeys))


    def _get_cache_keys(self, instance):
        conn = self._get_conn(instance)
        cachekeys = conn.keys('cache-*')
        self.gauge('redis-tyk.cachekeys', len(cachekeys))


    def check(self, instance):
        if ("host" not in instance or "port" not in instance) and "unix_socket_path" not in instance:
            raise Exception("You must specify a host/port couple or a unix_socket_path")
        # custom_tags = instance.get('tags', [])

        self._get_api_keys(instance)
        self._get_cache_keys(instance)
        # self._check_db(instance, custom_tags)
        # self._check_slowlog(instance, custom_tags)

    def _collect_metadata(self, info):
        if info and 'redis_version' in info:
            self.service_metadata('version', info['redis_version'])
